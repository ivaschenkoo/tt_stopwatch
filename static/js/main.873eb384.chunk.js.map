{"version":3,"sources":["components/Stopwatch/Stopwatch.module.css","components/Stopwatch/Stopwatch.jsx","components/Stopwatch/StopwatchContainer.jsx","App.js","index.js"],"names":["module","exports","Stopwatch","props","className","styles","wrapper","timeWrapper","time","hours","minutes","seconds","buttonWrapper","onClick","toggleTimer","status","active","pauseTimer","info","infoText","resetTimer","StopwatchContainer","useState","timer","setTime","setStatus","mainSub","setMainSub","counter","Math","trunc","slice","sequence$","Observable","subscriber","intervalId","setInterval","next","clearInterval","unsubscribe","subscribe","setTimeout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,QAAU,2BAA2B,YAAc,+BAA+B,cAAgB,iCAAiC,OAAS,0BAA0B,KAAO,wBAAwB,SAAW,8B,gKC8BnNC,EA5BG,SAACC,GACf,OACI,wBAAOC,UAAWC,IAAOC,QAAzB,UACI,sBAAKF,UAAWC,IAAOE,YAAvB,UACI,+BAAOJ,EAAMK,KAAKC,QAClB,qCAAQN,EAAMK,KAAKE,QAAnB,OACA,+BAAOP,EAAMK,KAAKG,aAGtB,sBAAKP,UAAWC,IAAOO,cAAvB,UACI,wBAAQC,QAAS,WAAQV,EAAMW,eACvBV,UAA4B,YAAjBD,EAAMY,OAAuBV,IAAOW,OAAS,GADhE,SAEuB,YAAjBb,EAAMY,QAAyC,UAAjBZ,EAAMY,OAAuB,QAAU,SAE3E,yBAAQF,QAAS,WAAQV,EAAMc,cACvBb,UAA4B,UAAjBD,EAAMY,OAAqBV,IAAOW,OAAS,GAD9D,kBAGI,sBAAMZ,UAAWC,IAAOa,KAAxB,eACA,sBAAMd,UAAWC,IAAOc,SAAxB,qCAEJ,wBAAQN,QAAS,WAAQV,EAAMiB,cAA/B,0B,QCgDDC,EAlEY,SAAClB,GAAW,IAAD,EACXmB,mBAAS,GADE,mBAC7BC,EAD6B,KACtBC,EADsB,OAERF,mBAAS,WAFD,mBAE7BP,EAF6B,KAErBU,EAFqB,OAGNH,mBAAS,IAHH,mBAG7BI,EAH6B,KAGpBC,EAHoB,KAI9BC,EAAU,EAEVpB,EAAOe,EAAQ,EAAI,CACnBd,MAAO,WAAIoB,KAAKC,MAAMP,EAAQ,OAAQQ,OAAO,GAC7CrB,QAAS,WAAKmB,KAAKC,MAAMP,EAAQ,IAAO,IAAKQ,OAAO,GACpDpB,QAAS,WAAKY,EAAQ,IAAMQ,OAAO,IACnC,CACAtB,MAAO,KACPC,QAAS,KACTC,QAAS,MAIPqB,EAAY,IAAIC,KAAW,SAACC,GAC9B,IAAMC,EAAaC,aAAY,WAC3BF,EAAWG,KAAKb,EAAQD,GAAgB,MACzC,KAEH,OAAO,WACHe,cAAcH,OA0BhBf,EAAa,WACA,YAAXL,GACAY,EAAWD,EAAQa,eAEvBf,EAAQ,GACRC,EAAU,YAGd,OACI,cAAC,EAAD,CAAWjB,KAAMA,EACNO,OAAQA,EACRD,YAjCK,WACD,YAAXC,GAAmC,UAAXA,GACxBY,EAAWK,EAAUQ,aACrBf,EAAU,YAEVL,KA6BOH,WAzBI,WACC,IAAZW,GACAA,IACAa,YAAW,WACPb,EAAU,IACX,MACgB,IAAZA,GAA4B,YAAXb,IACxBY,EAAWD,EAAQa,eACnBd,EAAU,SACVG,EAAU,IAiBHR,WAAYA,KCvDhBsB,MARf,WACE,OACE,qBAAKtC,UAAU,MAAf,SACE,cAAC,EAAD,OCDNuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.873eb384.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Stopwatch_wrapper__3Nl7m\",\"timeWrapper\":\"Stopwatch_timeWrapper__3uSYP\",\"buttonWrapper\":\"Stopwatch_buttonWrapper__515gv\",\"active\":\"Stopwatch_active__1HQ-m\",\"info\":\"Stopwatch_info__1-AHC\",\"infoText\":\"Stopwatch_infoText__3geqZ\"};","import React from 'react';\r\nimport styles from './Stopwatch.module.css'\r\n\r\nconst Stopwatch = (props) => {\r\n    return (\r\n        <aside className={styles.wrapper}>\r\n            <div className={styles.timeWrapper}>\r\n                <span>{props.time.hours}</span>\r\n                <span>:{props.time.minutes}:</span>\r\n                <span>{props.time.seconds}</span>\r\n            </div>\r\n\r\n            <div className={styles.buttonWrapper}>\r\n                <button onClick={() => { props.toggleTimer() }}\r\n                        className={props.status === 'started' ? styles.active : ''} >\r\n                    {(props.status === 'stopped' || props.status === 'pause' ) ? 'Start' : 'Stop'}\r\n                </button>\r\n                <button onClick={() => { props.pauseTimer() }}\r\n                        className={props.status === 'pause' ? styles.active : ''} >\r\n                    Pause\r\n                    <span className={styles.info}>i</span>\r\n                    <span className={styles.infoText}>Press twice to pause</span>\r\n                </button>\r\n                <button onClick={() => { props.resetTimer() }}>\r\n                    Reset\r\n                </button>\r\n            </div>\r\n        </aside>\r\n    )\r\n}\r\n\r\nexport default Stopwatch","import React, {useState} from 'react';\r\nimport Stopwatch from \"./Stopwatch\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n\r\nconst StopwatchContainer = (props) => {\r\n    let [timer, setTime] = useState(0);\r\n    let [status, setStatus] = useState('stopped');\r\n    let [mainSub, setMainSub] = useState({});\r\n    let counter = 0;\r\n\r\n    let time = timer > 0 ? {\r\n        hours: `0${Math.trunc(timer / 3600)}`.slice(-2),\r\n        minutes: `0${(Math.trunc(timer / 60)) % 60}`.slice(-2),\r\n        seconds: `0${(timer % 60)}`.slice(-2),\r\n    } : {\r\n        hours: '00',\r\n        minutes: '00',\r\n        seconds: '00'\r\n    }\r\n\r\n\r\n    const sequence$ = new Observable((subscriber) => {\r\n        const intervalId = setInterval(() => {\r\n            subscriber.next(setTime(timer = timer + 1))\r\n        }, 1000)\r\n\r\n        return () => {\r\n            clearInterval(intervalId)\r\n        }\r\n    });\r\n\r\n    const toggleTimer = () => {\r\n        if (status === 'stopped' || status === 'pause') {\r\n            setMainSub(sequence$.subscribe())\r\n            setStatus('started')\r\n        } else {\r\n            resetTimer()\r\n        }\r\n    }\r\n\r\n    const pauseTimer = () => {\r\n        if (counter === 0) {\r\n            counter++;\r\n            setTimeout(() => {\r\n                counter = 0;\r\n            }, 300)\r\n        } else if (counter === 1 && status === 'started') {\r\n            setMainSub(mainSub.unsubscribe())\r\n            setStatus('pause');\r\n            counter = 0;\r\n        }\r\n    }\r\n\r\n    const resetTimer = () => {\r\n        if (status === 'started') {\r\n            setMainSub(mainSub.unsubscribe())\r\n        }\r\n        setTime(0);\r\n        setStatus('stopped')\r\n    }\r\n\r\n    return (\r\n        <Stopwatch time={time}\r\n                   status={status}\r\n                   toggleTimer={toggleTimer}\r\n                   pauseTimer={pauseTimer}\r\n                   resetTimer={resetTimer} />\r\n    )\r\n}\r\n\r\nexport default StopwatchContainer","import React from 'react';\nimport './App.css';\nimport StopwatchContainer from \"./components/Stopwatch/StopwatchContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StopwatchContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}